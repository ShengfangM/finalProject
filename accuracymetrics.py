# -*- coding: utf-8 -*-
"""AccuracyMetrics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DSCL5IWUFy6h21SOmdUyd5LywNRZoALG
"""

import numpy as np

# function to get Iou from prediction and ground truth
def iou1(boxes_preds, boxes_labels):
    
    box1_x1 = boxes_preds[0]
    box1_y1 = boxes_preds[1]
    box1_x2 = boxes_preds[2]
    box1_y2 = boxes_preds[3]
    box2_x1 = boxes_labels[0]
    box2_y1 = boxes_labels[1]
    box2_x2 = boxes_labels[2]
    box2_y2 = boxes_labels[3]

    x1 = max(box1_x1, box2_x1)
    y1 = max(box1_y1, box2_y1)
    x2 = min(box1_x2, box2_x2)
    y2 = min(box1_y2, box2_y2)

    # Need clamp(0) in case they do not intersect, then we want intersection to be 0
    gapx = (x2 - x1) if (x2 - x1)>0 else 0
    gapy = (y2 - y1) if (y2 - y1)>0 else 0
    intersection = gapx * gapy
    box1_area = abs((box1_x2 - box1_x1) * (box1_y2 - box1_y1))
    box2_area = abs((box2_x2 - box2_x1) * (box2_y2 - box2_y1))

    return intersection / (box1_area + box2_area - intersection + 1e-6)

# function to get overlap rate
def intersec(boxes_preds, boxes_labels):
    
    box1_x1 = boxes_preds[0]
    box1_y1 = boxes_preds[1]
    box1_x2 = boxes_preds[2]
    box1_y2 = boxes_preds[3]
    box2_x1 = boxes_labels[0]
    box2_y1 = boxes_labels[1]
    box2_x2 = boxes_labels[2]
    box2_y2 = boxes_labels[3]

    x1 = max(box1_x1, box2_x1)
    y1 = max(box1_y1, box2_y1)
    x2 = min(box1_x2, box2_x2)
    y2 = min(box1_y2, box2_y2)

    # Need clamp(0) in case they do not intersect, then we want intersection to be 0
    gapx = (x2 - x1) if (x2 - x1)>0 else 0
    gapy = (y2 - y1) if (y2 - y1)>0 else 0
    intersection = gapx * gapy
    
    box1_area = abs((box1_x2 - box1_x1) * (box1_y2 - box1_y1))
    box2_area = abs((box2_x2 - box2_x1) * (box2_y2 - box2_y1))
    
    basearea = box1_area if box1_area<box2_area else box2_area

    return intersection /basearea

# function to get TP, FP, FN
def metrix_box(target, box_lables, threshold):

    boxes = target["boxes"]
    labels = target["labels"] 
    scores = target["scores"] 
    #masks = target[l]["masks"] 
    boxes = boxes.cpu().data.numpy()
    scores = scores.cpu().data.numpy()
    labels = labels.cpu().data.numpy()
    #imgi = img.permute(1,2,0) 

    N = len(boxes)

    area = np.zeros(N)
    for i in range(N):
        area[i] = (boxes[i][2] - boxes[i][0]) * (boxes[i][3] - boxes[i][1])

    mean_area = np.mean(area)
    devia = np.sqrt(np.sum((area - mean_area)**2)/(N-1))
    upperbound = mean_area+1.2*devia
    lowerbound = mean_area-1.2*devia
    
    TP50 = 0
    FP50 = 0
    FN50 = 0
    
        
    TP75 = 0
    FP75 = 0
    FN75 = 0
    
        
    TP95 = 0
    FP95 = 0
    FN95 = 0
    #boxes=outputi['boxes'][area(outputi['boxes']) > upperbound]


    box_preds_new = []
    score_new = []
    for i in range(len(boxes)):
        if lowerbound<(boxes[i][2] - boxes[i][0]) * (boxes[i][3] - boxes[i][1]) < upperbound and 0.5<(boxes[i][2] - boxes[i][0])/(boxes[i][3] - boxes[i][1])<3:
            if(scores[i]>threshold):
                box_preds_new.append([boxes[i][0], boxes[i][1], boxes[i][2], boxes[i][3]])
                score_new.append(scores[i])

    box_preds = [] 
    for ii in range(len(box_preds_new)):
        iskeep = 0
        for jj in range(len(box_preds_new)):
           
            iou2 = intersec(box_preds_new[ii], box_preds_new[jj])
            if jj!= ii and iou2 > 0.8 and score_new[jj] > score_new[ii]:   
                iskeep = 1
                
        if iskeep == 0:
            box_preds.append(box_preds_new[ii])
#     box_preds = box_preds_new  
    
    
    true50 = np.zeros(len(box_preds))
    true75 = np.zeros(len(box_preds))
    true95 = np.zeros(len(box_preds))
    
    gt_50 = np.zeros(len(box_lables))
    gt_75 = np.zeros(len(box_lables))
    gt_95 = np.zeros(len(box_lables)) 
    
     
    for j in range(len(box_preds)):
                                  
        for i in range(len(box_lables)):
            
            iou = iou1(box_preds[j], box_lables[i])
            
            if iou>0.5:
                if(gt_50[i] ==0):
                    gt_50[i] =1
                    TP50 += 1
                true50[j] =1
                    
                        
            if iou>0.75:
                if(gt_75[i] ==0):
                    gt_75[i] =1
                    TP75 += 1
                true75[j] =1
                    
                        
            if iou>0.95:
                if(gt_95[i] ==0):
                    gt_95[i] =1
                    TP95 += 1
                true95[j] =1
                 
                
#     for i in range(len(box_lables)):
        
#         box_gt = box_lables[i]
        
#         for j in range(len(box_preds)):
            
#             iou = iou1(box_preds[j], box_gt)
            
#             if iou>0.5:
#                 if(true50[j] ==0):
#                     true50[j] =1
#                     TP50 += 1
#                     gt_50[i] =1
                    
                        
#             if iou>0.75:
#                 if(true75[j] ==0):
#                     true75[j] =1
#                     TP75 += 1
#                     gt_75[i] =1
                    
                        
#             if iou>0.95:
#                 if(true95[j] ==0):
#                     true95[j] =1
#                     TP95 += 1
#                     gt_95[i] =1

               
                
    TP50 = np.count_nonzero(true50 == 1)                               
    FP50 = np.count_nonzero(true50 == 0)
    FN50 = np.count_nonzero(gt_50 == 0)

    TP75 = np.count_nonzero(true75 == 1) 
    FP75 = np.count_nonzero(true75 == 0)
    FN75 = np.count_nonzero(gt_75 == 0)
    
    TP95 = np.count_nonzero(true95 == 1) 
    FP95 = np.count_nonzero(true95 == 0)
    FN95 = np.count_nonzero(gt_95 == 0)    
    
    return  TP50,FP50, FN50,TP75,FP75, FN75,TP95,FP95, FN95